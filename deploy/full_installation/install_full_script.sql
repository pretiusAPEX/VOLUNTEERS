CREATE TABLE  "LANGUAGES" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CODE" VARCHAR2(4000 CHAR) NOT NULL ENABLE, 
	"NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"CREATED" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"UPDATED" DATE NOT NULL ENABLE, 
	"UPDATED_BY" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "LANGUAGES_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/

CREATE TABLE  "SETTINGS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CODE" VARCHAR2(128 CHAR), 
	"VALUE" VARCHAR2(512 CHAR), 
	"NAME" VARCHAR2(4000), 
	 CONSTRAINT "SETTINGS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/

CREATE TABLE  "TIME_SLOTS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"THE_ORDER" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(255 CHAR), 
	"DESCRIPTION" VARCHAR2(4000 CHAR), 
	"TYPE" VARCHAR2(4000 CHAR) DEFAULT 'HOURS' NOT NULL ENABLE, 
	"CREATED" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"UPDATED" DATE NOT NULL ENABLE, 
	"UPDATED_BY" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"HOUR_START" NUMBER, 
	"HOUR_END" NUMBER, 
	 CONSTRAINT "TIME_SLOTS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/


CREATE TABLE  "VOLUNTEER_TYPES" 
   (	"NAME" VARCHAR2(1000) NOT NULL ENABLE, 
	"CODE" VARCHAR2(100) NOT NULL ENABLE, 
	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	 CONSTRAINT "VOLUNTEER_TYPES_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/

CREATE TABLE  "VOLUNTEERS_TIME_SLOT_TYPE_LIMITS" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"VOLUNTEERS_TIME_SLOTS_ID" NUMBER NOT NULL ENABLE, 
	"VOLUNTEER_TYPES_ID" NUMBER NOT NULL ENABLE, 
	"TYPE_LIMIT" NUMBER NOT NULL ENABLE, 
	"CREATED" DATE, 
	"CREATED_BY" VARCHAR2(1000), 
	"UPDATED" DATE, 
	"UPDATED_BY" VARCHAR2(1000), 
	 CONSTRAINT "VOLUNTEERS_TIME_SLOT_TYPE_LIMITS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "VOLUNTEERS_TIME_SLOT_TYPE_LIMITS_CON" UNIQUE ("VOLUNTEERS_TIME_SLOTS_ID", "VOLUNTEER_TYPES_ID")
  USING INDEX  ENABLE
   )
/

CREATE TABLE  "VOLUNTEERS_TIME_SLOTS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TIME_SLOT_ID" NUMBER, 
	"DATE_NAME" DATE, 
	"VOLUNTEERS_LIMIT" NUMBER, 
	"CREATED" DATE, 
	"CREATED_BY" VARCHAR2(100), 
	"UPDATED" DATE, 
	"UPDATED_BY" VARCHAR2(100), 
	 CONSTRAINT "VOLUNTEERS_TIME_SLOTS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "VOLUNTEERS_TIME_SLOTS_CON" UNIQUE ("DATE_NAME", "TIME_SLOT_ID")
  USING INDEX  ENABLE
   )
/

CREATE TABLE  "VOLUNTEERS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"THE_DATE" DATE NOT NULL ENABLE, 
	"TIME_SLOT" NUMBER NOT NULL ENABLE, 
	"NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"TYPE" VARCHAR2(4000 CHAR), 
	"PHONE_NUMBER" NUMBER NOT NULL ENABLE, 
	"LANGUAGES" VARCHAR2(4000 CHAR) NOT NULL ENABLE, 
	"COMMENTS" VARCHAR2(4000 CHAR), 
	"CREATED" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"UPDATED" DATE NOT NULL ENABLE, 
	"UPDATED_BY" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(128) DEFAULT 'NO_DATA' NOT NULL ENABLE, 
	"SURNAME" VARCHAR2(4000), 
	"FOUNDATION_ID" VARCHAR2(128 CHAR), 
	"WAS_ON_SITE" VARCHAR2(1 CHAR), 
	"ENTRY_HOUR" VARCHAR2(50 CHAR), 
	"EXIT_HOUR" VARCHAR2(50 CHAR), 
	 CONSTRAINT "VOLONTEERS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/

ALTER TABLE  "VOLUNTEERS" ADD CONSTRAINT "VOLONTEERS_TIME_SLOT_FK" FOREIGN KEY ("TIME_SLOT")
	  REFERENCES  "TIME_SLOTS" ("ID") ON DELETE CASCADE ENABLE
/

ALTER TABLE  "VOLUNTEERS_TIME_SLOT_TYPE_LIMITS" ADD CONSTRAINT "VOLUNTEERS_TIME_SLOT_TYPE_FK" FOREIGN KEY ("VOLUNTEER_TYPES_ID")
	  REFERENCES  "VOLUNTEER_TYPES" ("ID") ON DELETE CASCADE ENABLE
/

ALTER TABLE  "VOLUNTEERS_TIME_SLOT_TYPE_LIMITS" ADD CONSTRAINT "VOLUNTEERS_TIME_SLOT_TYPE_LIMITS_FK" FOREIGN KEY ("VOLUNTEERS_TIME_SLOTS_ID")
	  REFERENCES  "VOLUNTEERS_TIME_SLOTS" ("ID") ON DELETE CASCADE ENABLE;
/

CREATE UNIQUE INDEX  "LANGUAGES_IDX1" ON  "LANGUAGES" ("CODE")
/

CREATE UNIQUE INDEX  "SETTINGS_IDX1" ON  "SETTINGS" ("CODE")
/

CREATE INDEX  "VOLONTEERS_I1" ON  "VOLUNTEERS" ("TIME_SLOT")
/

CREATE UNIQUE INDEX  "VOLUNTEER_TYPES_IDX1" ON  "VOLUNTEER_TYPES" ("CODE")
/


CREATE OR REPLACE EDITIONABLE TRIGGER  "LANGUAGES_BIU" 
    before insert or update  
    on languages 
    for each row 
begin 
    if inserting then 
        :new.created := sysdate; 
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user); 
    end if; 
    :new.updated := sysdate; 
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user); 
end languages_biu;

/
ALTER TRIGGER  "LANGUAGES_BIU" ENABLE;
/


CREATE OR REPLACE EDITIONABLE TRIGGER  "TIME_SLOTS_BIU" 
    before insert or update  
    on time_slots 
    for each row 
begin 
    if inserting then 
        :new.created := sysdate; 
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user); 
    end if; 
    :new.updated := sysdate; 
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user); 
end time_slots_biu;

/
ALTER TRIGGER  "TIME_SLOTS_BIU" ENABLE
/



CREATE OR REPLACE EDITIONABLE TRIGGER  "VOLONTEERS_BIU" 
    before insert or update  
    on "VOLUNTEERS" 
    for each row 
begin 
    if inserting then 
        :new.created := sysdate; 
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user); 
    end if; 
    :new.updated := sysdate; 
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user); 
end volonteers_biu;

/
ALTER TRIGGER  "VOLONTEERS_BIU" ENABLE
/


CREATE OR REPLACE EDITIONABLE TRIGGER  "VOLUNTEERS_TIME_SLOT_TYPE_LIMITS_BIU" 
    before insert or update  
    on "VOLUNTEERS_TIME_SLOT_TYPE_LIMITS" 
    for each row 
begin 
    if inserting then 
        :new.created := sysdate; 
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user); 
    end if; 
    :new.updated := sysdate; 
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user); 
end VOLUNTEERS_TIME_SLOT_TYPE_LIMITS_BIU;

/
ALTER TRIGGER  "VOLUNTEERS_TIME_SLOT_TYPE_LIMITS_BIU" ENABLE
/


CREATE OR REPLACE EDITIONABLE TRIGGER  "VOLUNTEERS_TIME_SLOTS_BIU" 
    before insert or update  
    on VOLUNTEERS_TIME_SLOTS 
    for each row 
begin 
    if inserting then 
        :new.created := sysdate; 
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user); 
    end if; 
    :new.updated := sysdate; 
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user); 
end VOLUNTEERS_TIME_SLOTS_biu;

/
ALTER TRIGGER  "VOLUNTEERS_TIME_SLOTS_BIU" ENABLE
/

create or replace package NOTYFIKACJE_PKG as

procedure p_potwierdzenie_rejestracji (
   pi_id in VOLUNTEERS.ID%TYPE
   );
   
end NOTYFIKACJE_PKG;
/

create or replace package body NOTYFIKACJE_PKG as

  function f_get_volunteers_row(
    pi_id in VOLUNTEERS.ID%TYPE
  ) return VOLUNTEERS%ROWTYPE
  is
    v_return VOLUNTEERS%ROWTYPE;
  begin
    for x in (select * 
                from VOLUNTEERS 
               where id = pi_id
    )
    loop
      v_return := x;
    end loop;

    return v_return;

  end f_get_volunteers_row;     

  function f_get_time_slot_name(
    pi_id in TIME_SLOTS.ID%TYPE
  ) return TIME_SLOTS.NAME%TYPE
  is
    v_return TIME_SLOTS.NAME%TYPE;
  begin
    for x in (select NAME 
                from TIME_SLOTS 
               where id = pi_id
    )
    loop
      v_return := x.NAME;
    end loop;

    return v_return;

  end f_get_time_slot_name; 

  function f_get_language_list(
    pi_languages in varchar2
  ) return varchar2
  is
    v_return varchar2(4000);
  begin

    select listagg(NAME, ', ') WITHIN GROUP (ORDER BY NAME)
      into v_return
      from LANGUAGES
     where CODE in (select COLUMN_VALUE 
                      from APEX_STRING.SPLIT(pi_languages,':'));

    return v_return;

  end f_get_language_list; 

  function f_get_support_type(
    pi_support_type in varchar2
  ) return varchar2
  is
    v_return varchar2(4000);
  begin

    select listagg(NAME, ', ') WITHIN GROUP (ORDER BY NAME)
      into v_return
      from VOLUNTEER_TYPES
     where CODE in (select COLUMN_VALUE 
                      from APEX_STRING.SPLIT(pi_support_type,':'));

    return v_return;

  end f_get_support_type; 

  procedure p_potwierdzenie_rejestracji(
     pi_id in VOLUNTEERS.ID%TYPE
    )
  as
    v_volunteers_row VOLUNTEERS%ROWTYPE;
    v_cancel_link varchar(32000); 
    v_time_slot varchar(200);
    v_languages varchar2(32000);
    v_support_type varchar2(32000);
  begin

    v_volunteers_row := f_get_volunteers_row(pi_id);

    v_cancel_link := APEX_UTIL.HOST_URL || APEX_UTIL.PREPARE_URL(
      p_url => 'f?p=' || v('APP_ID') || ':9:::::P9_ID:'||pi_id,
      p_checksum_type => 'PUBLIC_BOOKMARK',
      p_plain_url => true
    );
    
    v_time_slot := f_get_time_slot_name(v_volunteers_row.TIME_SLOT);
    v_languages := f_get_language_list(v_volunteers_row.LANGUAGES);
    v_support_type := f_get_support_type(v_volunteers_row.TYPE);

    apex_mail.send (
        p_to                 => v_volunteers_row.EMAIL,
        p_template_static_id => 'POTWIERDZENIE_REJESTRACJI',
        p_placeholders       => '{' ||
        '    "THE_DATE":'     || apex_json.stringify( TO_CHAR(v_volunteers_row.THE_DATE, 'fmDay, fmDD fmMonth, YYYY' )) ||
        '   ,"NAME":'         || apex_json.stringify( v_volunteers_row.NAME ) ||
        '   ,"SURNAME":'      || apex_json.stringify( v_volunteers_row.SURNAME ) ||
        '   ,"TIME_SLOT":'    || apex_json.stringify( v_time_slot ) ||
        '   ,"PHONE_NUMBER":' || apex_json.stringify( v_volunteers_row.PHONE_NUMBER ) ||
        '   ,"LANGUAGES":'    || apex_json.stringify( v_languages) ||
        '   ,"SUPPORT_TYPE":' || apex_json.stringify( v_support_type ) ||
        '   ,"COMMENTS":'     || apex_json.stringify( v_volunteers_row.COMMENTS ) ||
        '   ,"CANCEL_LINK":'  || apex_json.stringify( v_cancel_link ) ||
        '}',
        p_application_id => v('APP_ID'));
  
  end p_potwierdzenie_rejestracji;
     
  end NOTYFIKACJE_PKG;
/


insert into SETTINGS (CODE,VALUE,NAME) values ('VOLUNTEERS_LIMIT','40','Limit wolontariuszy w slocie');
insert into SETTINGS (CODE,VALUE,NAME) values ('DAYS_FORWARD','7','Pokaż dni w przód na raporcie zgłoszeń');


insert into TIME_SLOTS (THE_ORDER,NAME,TYPE,HOUR_START,HOUR_END) values (1,'23:00 - 2:00','HOUR',23,2);
insert into TIME_SLOTS (THE_ORDER,NAME,TYPE,HOUR_START,HOUR_END) values (2,'02:00 - 5:00','HOUR',2,5);
insert into TIME_SLOTS (THE_ORDER,NAME,TYPE,HOUR_START,HOUR_END) values (3,'5:00 - 8:00','HOUR',5,8);
insert into TIME_SLOTS (THE_ORDER,NAME,TYPE,HOUR_START,HOUR_END) values (4,'8:00 - 11:00','HOUR',8,11);
insert into TIME_SLOTS (THE_ORDER,NAME,TYPE,HOUR_START,HOUR_END) values (5,'11:00 - 14:00','HOUR',11,14);
insert into TIME_SLOTS (THE_ORDER,NAME,TYPE,HOUR_START,HOUR_END) values (6,'14:00 - 17:00','HOUR',14,17);
insert into TIME_SLOTS (THE_ORDER,NAME,TYPE,HOUR_START,HOUR_END) values (7,'17:00 - 20:00','HOUR',17,20);
insert into TIME_SLOTS (THE_ORDER,NAME,TYPE,HOUR_START,HOUR_END) values (8,'20:00 - 23:00','HOUR',20,23);